//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter Data
		 */
		class DataType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			std::string face_db_path;
			std::string moped_model_path;
		
		public:
			// default constructor
			DataType() {
				face_db_path = "data/FaceRecognition/xsdDb.xml";
				moped_model_path = "data/FaceRecognition/MopedModels";
			}
		
			/**
			 * here are the public getters
			 */
			inline std::string getFace_db_path() const { return face_db_path; }
			inline std::string getMoped_model_path() const { return moped_model_path; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "Data(";
				os << "face_db_path = " << face_db_path << ", ";
				os << "moped_model_path = " << moped_model_path << ", ";
				os << ")\n";
			}
			
		}; // end class DataType
		
		/**
		 * Definition of Parameter General
		 */
		class GeneralType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			double table_thickness;
			bool use_image;
			bool use_kinect;
			bool use_manipulator;
			bool verbose;
			double workspace_max_xy;
			double workspace_max_z;
			double workspace_min_z;
		
		public:
			// default constructor
			GeneralType() {
				table_thickness = 75;
				use_image = false;
				use_kinect = true;
				use_manipulator = false;
				verbose = true;
				workspace_max_xy = 700;
				workspace_max_z = 1300;
				workspace_min_z = 200;
			}
		
			/**
			 * here are the public getters
			 */
			inline double getTable_thickness() const { return table_thickness; }
			inline bool getUse_image() const { return use_image; }
			inline bool getUse_kinect() const { return use_kinect; }
			inline bool getUse_manipulator() const { return use_manipulator; }
			inline bool getVerbose() const { return verbose; }
			inline double getWorkspace_max_xy() const { return workspace_max_xy; }
			inline double getWorkspace_max_z() const { return workspace_max_z; }
			inline double getWorkspace_min_z() const { return workspace_min_z; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "General(";
				os << "table_thickness = " << table_thickness << ", ";
				os << "use_image = " << use_image << ", ";
				os << "use_kinect = " << use_kinect << ", ";
				os << "use_manipulator = " << use_manipulator << ", ";
				os << "verbose = " << verbose << ", ";
				os << "workspace_max_xy = " << workspace_max_xy << ", ";
				os << "workspace_max_z = " << workspace_max_z << ", ";
				os << "workspace_min_z = " << workspace_min_z << ", ";
				os << ")\n";
			}
			
		}; // end class GeneralType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
		/**
		 * Definition of instantiated ParameterRepository CommObjectRecognitionObjects
		 */
		class CommObjectRecognitionObjectsType {
			friend class ParamUpdateHandler;
			public:
			/**
			 * Definition of instantiated ParameterSet ObjectRecognitionParameter
			 */
			class ObjectRecognitionParameterType {
				friend class ParamUpdateHandler;
				public:
				/**
				 * Definition of Parameter BELIEF_THRESHOLD
				 */
				class BELIEF_THRESHOLDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					double threshold;
					
				public:
					// default constructor
					BELIEF_THRESHOLDType() {
						threshold = 0.0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline double getThreshold() const { return threshold; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tBELIEF_THRESHOLD(";
						os << "threshold = " << threshold << ", ";
						os << ")\n";
					}
					
				}; // end of parameter class BELIEF_THRESHOLDType
				
				/**
				 * Definition of Parameter CLOUD
				 */
				class CLOUDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					unsigned int id;
					
				public:
					// default constructor
					CLOUDType() {
						id = 0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline unsigned int getId() const { return id; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tCLOUD(";
						os << "id = " << id << ", ";
						os << ")\n";
					}
					
				}; // end of parameter class CLOUDType
				
				/**
				 * Definition of Parameter CLUSTERING
				 */
				class CLUSTERINGType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					bool doClustering;
					
				public:
					// default constructor
					CLUSTERINGType() {
						doClustering = true;
					}
					
					/**
					 * here are the getter methods
					 */
					inline bool getDoClustering() const { return doClustering; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tCLUSTERING(";
						os << "doClustering = " << doClustering << ", ";
						os << ")\n";
					}
					
				}; // end of parameter class CLUSTERINGType
				
				/**
				 * Definition of Parameter ESTIMATEFILLING
				 */
				class ESTIMATEFILLINGType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					bool estimateObjectProperties;
					
				public:
					// default constructor
					ESTIMATEFILLINGType() {
						estimateObjectProperties = false;
					}
					
					/**
					 * here are the getter methods
					 */
					inline bool getEstimateObjectProperties() const { return estimateObjectProperties; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tESTIMATEFILLING(";
						os << "estimateObjectProperties = " << estimateObjectProperties << ", ";
						os << ")\n";
					}
					
				}; // end of parameter class ESTIMATEFILLINGType
				
				/**
				 * Definition of Parameter SETOBJECTID
				 */
				class SETOBJECTIDType {
					friend class ParamUpdateHandler;
				
				protected:
					/**
					 * here are the member definitions
					 */
					unsigned int id;
					
				public:
					// default constructor
					SETOBJECTIDType() {
						id = 0;
					}
					
					/**
					 * here are the getter methods
					 */
					inline unsigned int getId() const { return id; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "\tSETOBJECTID(";
						os << "id = " << id << ", ";
						os << ")\n";
					}
					
				}; // end of parameter class SETOBJECTIDType
				
				protected:
					/**
					 * internal members
					 */
					BELIEF_THRESHOLDType BELIEF_THRESHOLD;
					CLOUDType CLOUD;
					CLUSTERINGType CLUSTERING;
					ESTIMATEFILLINGType ESTIMATEFILLING;
					SETOBJECTIDType SETOBJECTID;
					
				public:
					/**
					 * public getter methods
					 */
					inline BELIEF_THRESHOLDType getBELIEF_THRESHOLD() const { return BELIEF_THRESHOLD; }
					inline CLOUDType getCLOUD() const { return CLOUD; }
					inline CLUSTERINGType getCLUSTERING() const { return CLUSTERING; }
					inline ESTIMATEFILLINGType getESTIMATEFILLING() const { return ESTIMATEFILLING; }
					inline SETOBJECTIDType getSETOBJECTID() const { return SETOBJECTID; }
					
					void to_ostream(std::ostream &os = std::cout) const
					{
						os << "ObjectRecognitionParameter(\n";
						BELIEF_THRESHOLD.to_ostream(os);
						CLOUD.to_ostream(os);
						CLUSTERING.to_ostream(os);
						ESTIMATEFILLING.to_ostream(os);
						SETOBJECTID.to_ostream(os);
						os << ")";
					}
			}; // end of parameter-set class ObjectRecognitionParameterType
			
			protected:
				/**
				 * internal members
				 */
				ObjectRecognitionParameterType ObjectRecognitionParameter;
			
			public:
				/**
				 * public getter methods
				 */
				inline ObjectRecognitionParameterType getObjectRecognitionParameter() const { return ObjectRecognitionParameter; }
				
				void to_ostream(std::ostream &os = std::cout) const
				{
					os << "CommObjectRecognitionObjects(\n";
					ObjectRecognitionParameter.to_ostream(os);
					os << ")";
				}
		}; // end of parameter-repository wrapper class CommObjectRecognitionObjectsType
	
protected:

	// Internal params
	DataType Data;
	GeneralType General;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	CommObjectRecognitionObjectsType CommObjectRecognitionObjects;
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
		this->CommObjectRecognitionObjects = commit.getCommObjectRecognitionObjects();
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	DataType getData() const {
		return Data;
	}
	GeneralType getGeneral() const {
		return General;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	CommObjectRecognitionObjectsType getCommObjectRecognitionObjects() const {
		return CommObjectRecognitionObjects;
	}
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		Data.to_ostream(os);
		General.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
		CommObjectRecognitionObjects.to_ostream(os);
	}
};

#endif
