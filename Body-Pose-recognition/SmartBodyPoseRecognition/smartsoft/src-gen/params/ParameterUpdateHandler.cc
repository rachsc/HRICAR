//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ParameterUpdateHandler.hh"

#include "SmartBodyPoseRecognition.hh"

SmartACE::CommParameterResponse ParamUpdateHandler::handleParameter(const SmartACE::CommParameterRequest& request)
{
	SmartACE::CommParameterResponse answer;

	std::string tag = request.getTag();
	std::cout<<"PARAMETER: "<<tag<<std::endl;
	
	if (tag == "COMMIT")
	{
		answer.setResponse(globalState.handleCOMMIT(commitState));
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			globalStateLock.acquire();
			// change the content of the globalState, however change only the generated content
			// without affecting potential user member variables (which is more intuitive for the user)
			globalState.setContent(commitState);
			globalStateLock.release();
		} else {
			// the commit validation check returned != OK
			// the commit state is rejected and is not copied into the global state
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.ADDALGORITHM")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_algorithm = "";
		if(request.getString("1", temp_algorithm) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDALGORITHMCore(
			temp_algorithm
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.ADDOBJECT")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_type = "";
		if(request.getString("1", temp_type) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDOBJECTCore(
			temp_type
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.ADDSENSOR")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_sensor = "";
		if(request.getString("1", temp_sensor) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_ADDSENSORCore(
			temp_sensor
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.BEHAVIOR")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_type = "";
		if(request.getString("1", temp_type) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_BEHAVIORCore(
			temp_type
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.BELIEF_THRESHOLD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		double temp_threshold = 0.0;
		if(request.getDouble("1", temp_threshold) == 0) {
			commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.BELIEF_THRESHOLD.threshold = temp_threshold;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.CAPTURE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_CAPTURECore(
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.CLOUD")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		unsigned int temp_id = 0;
		if(request.getInteger("1", temp_id) == 0) {
			commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLOUD.id = temp_id;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.CLUSTERING")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		bool temp_doClustering = false;
		if(request.getBoolean("1", temp_doClustering) == 0) {
			commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLUSTERING.doClustering = temp_doClustering;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.DELALGORITHMS")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELALGORITHMSCore(
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.DELOBJECTS")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELOBJECTSCore(
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.DELSENSORS")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_DELSENSORSCore(
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.ESTIMATEFILLING")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		bool temp_estimateObjectProperties = false;
		if(request.getBoolean("1", temp_estimateObjectProperties) == 0) {
			commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.ESTIMATEFILLING.estimateObjectProperties = temp_estimateObjectProperties;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.RECOGNIZE")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK);
		
		std::string temp_viewPointID = "";
		if(request.getString("1", temp_viewPointID) != 0) {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
		if(answer.getResponse() == SmartACE::ParamResponseType::OK) {
			triggerHandler.handleCommObjectRecognitionObjects_ObjectRecognitionParameter_RECOGNIZECore(
			temp_viewPointID
			);
		}
	}
	else if (tag == "COMMOBJECTRECOGNITIONOBJECTS.OBJECTRECOGNITIONPARAMETER.SETOBJECTID")
	{
		answer.setResponse(SmartACE::ParamResponseType::OK); // TODO: this should be decided according to validation checks defined in the model (not yet implemented)
		
		unsigned int temp_id = 0;
		if(request.getInteger("1", temp_id) == 0) {
			commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.SETOBJECTID.id = temp_id;
		} else {
			answer.setResponse(SmartACE::ParamResponseType::INVALID);
		}
		
	}
	else
	{
		/////////////////////////////////////////////////////////////////////
		// default new
		std::cout<<"ERROR wrong Parameter!"<<std::endl;
		answer.setResponse(SmartACE::ParamResponseType::INVALID);
	}
	

	std::cout<<"[handleQuery] PARAMETER "<<tag<<" DONE\n\n";

	return answer;
}


ParameterStateStruct ParamUpdateHandler::getGlobalState() const{
	SmartACE::SmartGuard g(globalStateLock);
	return this->globalState;
}


void ParamUpdateHandler::loadParameter(SmartACE::SmartIniParameter &parameter)
{
	/*
	 Parameters can be specified via command line -filename=<filename>

	 With this parameter present:
	 - The component will look for the file in the current working directory,
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found

	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc
	 */

	// load parameters
	try
	{
		// print all known parameters
		parameter.print();

		//
		// load internal parameters (if any)
		//
		// parameter Data
		if(parameter.getString("Data", "bodypose_db_path", commitState.Data.bodypose_db_path))
		{
			globalState.Data.bodypose_db_path = commitState.Data.bodypose_db_path;
		}
		if(parameter.getString("Data", "moped_model_path", commitState.Data.moped_model_path))
		{
			globalState.Data.moped_model_path = commitState.Data.moped_model_path;
		}
		// parameter General
		if(parameter.getDouble("General", "table_thickness", commitState.General.table_thickness))
		{
			globalState.General.table_thickness = commitState.General.table_thickness;
		}
		if(parameter.getBoolean("General", "use_image", commitState.General.use_image))
		{
			globalState.General.use_image = commitState.General.use_image;
		}
		if(parameter.getBoolean("General", "use_kinect", commitState.General.use_kinect))
		{
			globalState.General.use_kinect = commitState.General.use_kinect;
		}
		if(parameter.getBoolean("General", "use_manipulator", commitState.General.use_manipulator))
		{
			globalState.General.use_manipulator = commitState.General.use_manipulator;
		}
		if(parameter.getBoolean("General", "verbose", commitState.General.verbose))
		{
			globalState.General.verbose = commitState.General.verbose;
		}
		if(parameter.getDouble("General", "workspace_max_xy", commitState.General.workspace_max_xy))
		{
			globalState.General.workspace_max_xy = commitState.General.workspace_max_xy;
		}
		if(parameter.getDouble("General", "workspace_max_z", commitState.General.workspace_max_z))
		{
			globalState.General.workspace_max_z = commitState.General.workspace_max_z;
		}
		if(parameter.getDouble("General", "workspace_min_z", commitState.General.workspace_min_z))
		{
			globalState.General.workspace_min_z = commitState.General.workspace_min_z;
		}
		
		//
		// load extended parameters (if any)
		//
		
		//
		// load instance parameters (if a parameter definition was instantiated in the model)
		//
		// parameter CommObjectRecognitionObjects.ObjectRecognitionParameter.BELIEF_THRESHOLD
		if(parameter.getDouble("CommObjectRecognitionObjects.ObjectRecognitionParameter.BELIEF_THRESHOLD", "threshold", commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.BELIEF_THRESHOLD.threshold))
		{
			globalState.CommObjectRecognitionObjects.ObjectRecognitionParameter.BELIEF_THRESHOLD.threshold = commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.BELIEF_THRESHOLD.threshold;
		}
		// parameter CommObjectRecognitionObjects.ObjectRecognitionParameter.CLOUD
		if(parameter.getInteger("CommObjectRecognitionObjects.ObjectRecognitionParameter.CLOUD", "id", commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLOUD.id))
		{
			globalState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLOUD.id = commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLOUD.id;
		}
		// parameter CommObjectRecognitionObjects.ObjectRecognitionParameter.CLUSTERING
		if(parameter.getBoolean("CommObjectRecognitionObjects.ObjectRecognitionParameter.CLUSTERING", "doClustering", commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLUSTERING.doClustering))
		{
			globalState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLUSTERING.doClustering = commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.CLUSTERING.doClustering;
		}
		// parameter CommObjectRecognitionObjects.ObjectRecognitionParameter.ESTIMATEFILLING
		if(parameter.getBoolean("CommObjectRecognitionObjects.ObjectRecognitionParameter.ESTIMATEFILLING", "estimateObjectProperties", commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.ESTIMATEFILLING.estimateObjectProperties))
		{
			globalState.CommObjectRecognitionObjects.ObjectRecognitionParameter.ESTIMATEFILLING.estimateObjectProperties = commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.ESTIMATEFILLING.estimateObjectProperties;
		}
		// parameter CommObjectRecognitionObjects.ObjectRecognitionParameter.SETOBJECTID
		if(parameter.getInteger("CommObjectRecognitionObjects.ObjectRecognitionParameter.SETOBJECTID", "id", commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.SETOBJECTID.id))
		{
			globalState.CommObjectRecognitionObjects.ObjectRecognitionParameter.SETOBJECTID.id = commitState.CommObjectRecognitionObjects.ObjectRecognitionParameter.SETOBJECTID.id;
		}

	} catch (const SmartACE::IniParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (const std::exception &ex)
	{
		std::cerr << "Uncaught std:: exception" << ex.what() << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}
